version: '3.7'

services:
  # python backend
  biq-webserver:
    container_name: biq-webserver
    tty: true
    stdin_open: true
    restart: unless-stopped
    build: 
      context: .
      dockerfile: ${DOCKER_BUILD_FILE}
      target: ${BE_DOCKER_BUILD_TARGET}
      args:
        - APP_VER=${APP_VER}
    image: ${BE_DOCKER_BUILD_IMAGE}:${BE_DOCKER_BUILD_IMAGE_TAG}
    environment:
        - APP_VER=${APP_VER}
    volumes:
      - ./backend/src:/code/src
    networks:
      - webapp_network

  nginx-web-server:
    container_name: nginx-web-server
    tty: true
    image: nginx:1.19-alpine
    ports:
      - ${APP_PORT}:80
      - ${APP_SSL_PORT}:443
    volumes:
      - ./frontend/src:/usr/share/nginx/html
    networks:
      - webapp_network

  # Database Server
  database-biq-local:
    container_name: "${DB_HOST_CONTAINER}"
    tty: true
    restart: unless-stopped
    image: ${DB_DOCKER_IMAGE}:${DB_DOCKER_IMAGE_TAG}
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - ${DB_PORT}:3306
    volumes:
      - database-biq-local-data:/var/lib/mysql
    networks:
      - webapp_network

  # phpMyAdmin Service
  biq-phpmyadmin-local:
    container_name: "biq-phpmyadmin-local"
    tty: true
    restart: unless-stopped
    image: ${PMA_DOCKER_IMAGE}:${PMA_DOCKER_IMAGE_TAG}
    depends_on:
        - ${PMA_HOST}
    ports:
      - ${PMA_PORT}:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=${PMA_HOST}
      - PMA_USER=${PMA_USER}
      - PMA_PASSWORD=${PMA_PASSWORD}
    networks:
      - webapp_network

  # BIQ Handbook
  biq-handbook:
    container_name: biq-handbook
    tty: true
    stdin_open: true
    restart: unless-stopped
    image: ${HANDBOOK_IMAGE}:${HANDBOOK_IMAGE_TAG}
    ports:
      - ${HANDBOOK_PORT}:3000
      - ${HANDBOOK_SSL_PORT}:3001
    command:
      - serve
      - --hostname
      - '0.0.0.0'
    networks:
      - webapp_network

volumes:
  database-biq-local-data:
  biq-node_modules:

# Custom network for composed containers to communicate on
networks:
  webapp_network:
    driver: bridge
